===========================================
Interpreting SCE for TCP Congestion Control
===========================================

A guide to successfully implementing TCP congestion control algorithms which make use of SCE signals from the network, and remain compatible with both legacy middleboxes and legacy flows sharing the same path.

Jonathan Morton <chromatix99@gmail.com>

---

The first two documents in this series introduce the SCE (Some Congestion Experienced) codepoint of the ECN field in the IP header, which replaces the otherwise unused ECT(1) codepoint, and describe possible ways to generate these signals in middleboxes.  The ubiquitous ECT(0) codepoint is simply renamed ECT, and the existing CE and Not-ECT codepoints also retain their existing meanings.

The goal of SCE is to have the send rate of each flow converge on a steady value which exactly matches the path capacity, instead of oscillating wildly around it as conventional congestion control does.  This latter behaviour results from the limited congestion information conveyed by packet drops and CE marks, and the mandated response to those signals to maintain stability of the network.

The desired steady state occurs when half the inbound data packets are marked with SCE, and the other half with ECT; this corresponds to the path capacity being reached with minimal additional delay.  At higher delays, a higher proportion of SCE marks acts as a signal to reduce send rate, while when below available capacity, a lower proportion of SCE permits growing the send rate.

This can only happen when both endpoints negotiate an ECN-Capable connection (causing all data packets to be marked ECT at origin), and the bottleneck link is managed by an SCE-aware AQM.  Such an AQM will also mark CE if the queue it manages grows too much, as might happen if the send rate overshoots the ideal value, or if the available capacity decreases after convergence was achieved.  Legacy AQMs in the network may emit CE without an accompanying SCE, or congestion may be signalled only by drops if the bottleneck queue doesn't support ECN at all.

---

SCE Feedback to the Sender
==========================

This memo outlines three potential methods of informing the sender about SCE signals detected at the receiver, in increasing order of presumed implementation difficulty.  These are, in brief:

 - Implementing congestion control at the receiver through the TCP Receive Window.

 - Reusing the obsoleted Nonce Sum (NS) bit.

 - Replacing TCP Timestamps with a new TCP option incorporating SCE data.

 - Adapting AccECN to primarily carry SCE data instead of focusing on CE.


TCP Receive Window
------------------

This method makes no changes to the on-wire TCP definition or the TCP sender, and uses only a mechanism that has been present in TCP from the very beginning; the Receive Window (rwnd).  Senders are already required to limit the range of data sent to a window bounded on the left by the ack pointer and on the right by the rwnd offset from the ack pointer.

Since rwnd is transmitted as a 16-bit value, a scaling factor is negotiated during the handshake for each direction of the connection, allowing rwnd to grow up to 1GB, albeit with less precision.  Scaling factors of 64-512 bytes are commonly observed at present, which are sufficient to denote actual rwnd values to a precision better than one MSS while handling BDPs up to 32MB.

Congestion control was traditionally implemented at the sender, because that was the best place to observe packet loss, especially "tail loss" where the newest packets in the stream are dropped en route.  However with ECN and especially SCE, the most information about congestion is now present at the receiver.  Since legacy queues not implementing ECN and legacy receivers not implementing their own congestion control still exist in the Internet, congestion control must still be implemented at the sender, but it may additionally be implemented at the receiver without conflict.

Implementation is conceptually straightforward: a congestion control algorithm, modified to incorporate SCE information, is implemented on the receiver; the calculated cwnd is then communicated to the sender through the rwnd value.  If the actual rwnd is lower than the calculated cwnd, the former takes precedence.

Obviously, the receiver is not responsible for loss recovery through retransmission, except by indicating missing packets through appropriately formed acknowledgements (including SACK where implemented).  Where such discontiguous acknowledgments are sent, the rwnd should be modified so that it encompasses unreceived segments totalling the calculated cwnd, again subject to not exceeding the actual rwnd.  This mirrors the action of a conventional sender-side cwnd.


Reusing the Nonce Sum bit
-------------------------

Since the Nonce Sum extension to ECN was never implemented widely, and has been declared obsolete in favour of experimental use of ECT(1) (which SCE already takes advantage of), the NS bit in the TCP header is spare.  Since NS is already associated with ECN usage and should be capable of traversing firewalls and other middleboxes unmolested, it is appropriate to propose using it for SCE feedback.

Feedback of CE via ECE and CWR continues as normal.  The receiver does not get explicit confirmation that the sender acts on SCE feedback.

This will require both sender and receiver modifications to work correctly.  The congestion control at the sender will need to interpret the SCE data returned, and the receiver will need to appropriately return SCE data.  Unless both of these things occur, the connection will behave as for Classic ECN.

The receiver maintains distinct counts of the payload bytes received carrying ECT and SCE codepoints.  Packets carrying CE or Not-ECT are counted as ECT for this purpose.  Pure ack packets and spurious retransmissions are not counted for this purpose.

Acknowledgements sent by the receiver to advance the ack-pointer or add a SACK block are then modified to accurately convey the counts to the sender, as follows:

 - Acknowledgements of new data with the NS bit set imply that the SCE counter contained that much data.  The SCE counter is then decremented by that amount.

 - Acknowledgements of new data with the NS bit cleared imply that the non-SCE counter contained that much data.  The non-SCE counter is then decremented by that amount.

Since ECT and SCE are expected to alternate when an SCE connection reaches steady-state, it will be necessary to delay acknowledgements, accumulating several received packets of each type, to avoid sending too many pure acks.  It may be appropriate to consider implementing AckCC to reduce the frequency of acks in general.  If an ack needs to be sent immediately (including in response to a suspected loss or a CE mark), it should reflect the counter with the larger value, or the SCE counter if both are equal.  Otherwise, the counter reflected will usually alternate in consecutive acks.

The sender typically already uses the concept of newly-acknowledged bytes in its cwnd calculations (see RFC3465, Appropriate Byte Counting).  SCE-ignorant senders should be unaffected by the fact that some acknowledged bytes are associated with a set NS bit (indicating that a corresponding number of bytes - not necessarily the ones just acknowledged - arrived with an SCE mark) while others are associated with a cleared NS bit (indicating bytes received without SCE).  SCE-aware senders should use the distinction to evolve their cwnd values appropriately.

If acks with the NS bit set are never received, the sender may infer that either the receiver is not SCE aware, or no SCE signals are generated by middleboxes on the forward path, and should ensure that it behaves as though it supports only Classic ECN.

It is presently unclear how existing ECN-Capable receivers will react to SCE marks with respect to NS in corresponding acknowledgements.  They may ignore it completely and leave NS cleared, or they may respond as would be appropriate for the Nonce Sum extension, by setting NS to the least significant bit of the count of SCE marks received.  The latter is likely to confuse a sender relying on this particular reuse of NS, and may cause it to adopt send rates somewhat below the optimum in some cases.  It may be necessary for the sender to detect this behaviour, and disable its handling of SCE when faced with a legacy Nonce Sum receiver.


Enhanced TCP Timestamps Option
------------------------------

The TCP Timestamps Option has always occupied an awkward physical position in the TCP header, since it has a two-byte header but its payload is generally 4-byte aligned, leading to two bytes of NOP options being prepended purely for alignment purposes.  These two bytes can, by themselves, only be used for a TCP Option conveying binary information by its presence or absence.

+---------------+---------------+---------------+---------------+
| NOP           | NOP           | Timestamps=8  | Length = 10   |
+---------------+---------------+---------------+---------------+
| TSval                                                         |  Timestamps option.
+---------------+---------------+---------------+---------------+
| TSecr                                                         |
+---------------+---------------+---------------+---------------+

A new TCP Option could reasonably replace TCP Timestamps with a 12-byte option, carrying the TSval and TSecr fields in an aligned position as at present, but making 16 bits of space available for more productive use, without increasing the total size of pure-ack packets, nor reducing the payload of data segments.  Two such ideas are outlined below.

Explicit Congestion Window (ECW) moves congestion control into the receiver as outlined above, but without overloading the rwnd field, and incorporating an explicit scaling factor to represent any reasonable cwnd as a floating-point value.  This also incorporates control of Delayed ACKs as in AckCC:

+---------------+---------------+-----------+---+---+-----------+
| ECW (TBD)     | Length = 12   | Ack Ratio | Expon | Mantissa  |
+---------------+---------------+-----------+---+---+-----------+
| TSval                                                         |  Explicit Congestion
+---------------+---------------+---------------+---------------+  Window option.
| TSecr                                                         |
+---------------+---------------+---------------+---------------+

SCE Feedback (SCEF) keeps congestion control in the sender as traditionally, but supplies a ratio of ECT and SCE bytes recently received (where "recently" is left vague for the present).  For this purpose, CE and Not-ECT codepoints are not counted at all, only explicit ECT and SCE codepoints.  If the relevant counters are both zero, both fields are zeroed; if either exceeds the range of an unsigned byte, both are scaled down so that the larger one fits and the other retains the same ratio.

+---------------+---------------+---------------+---------------+
| SCEF (TBD)    | Length = 12   | SCE count     | ECT count     |
+---------------+---------------+---------------+---------------+
| TSval                                                         |  SCE Feedback option.
+---------------+---------------+---------------+---------------+
| TSecr                                                         |
+---------------+---------------+---------------+---------------+


Change AccECN to prioritise SCE
-------------------------------

The Accurate ECN draft describes a new TCP Option and new uses of some TCP flags by which detailed ECN feedback can be returned to the sender.  The TCP option includes wrapping counters of ECT(0), CE and ECT(1) packets received, in that order; the later fields can be omitted by simply truncating the option.

From the SCE perspective, this draft mostly has the advantage of traction in conjunction with L4S.  It is relatively inefficient for conveying SCE information because SCE marks would be reflected in the last of the three fields, necessitating a maximum-length option and thus a relatively large ack packet.  Space would unnecessarily be devoted to CE information which is already adequately conveyed (in standard TCP-ECN) by the ECE and CWR flags.  By comparison, SCEF and reusing NS would each typically require no extra packet space and most likely no additional handshake details.

To better adapt AccECN to SCE rather than L4S, the order of fields in the TCP option should be rearranged so that SCE comes first.  The redefinition of ECE/CWR/NS into the ACE field, which counts CE marks that should be less common with SCE than without, is acceptable but unnecessary.


These options are presented for discussion and further development, not as working specifications.

---

NewReno-SCE
===========

NewReno congestion control is a staple of academic papers studying the subject, largely due to its simplicity which makes it relatively easy to analyse, and its former ubiquity.  In this description, I assume that Appropriate Byte Counting [RFC3465] is used.

In broad summary, a congestion window (cwnd) is maintained starting at some small number of MSS segments, grows according to first the slow-start rule and then the congestion-avoidance rule until congestion is detected (by either a packet loss or a CE mark) or the receive window is reached as a limiting factor.  Congestion signals cause a halving of the cwnd over the course of one RTT, during which loss recovery also occurs as necessary.

The slow-start growth rule is that the cwnd is grown by one MSS segment for each MSS segment acknowledged.  This effectively results in the cwnd doubling each RTT, which is an exponential growth curve.  Slow-start is traditionally exited when the first congestion signal is detected, but other rules have also been tried.

The growth rule when in congestion-avoidance is that the cwnd grows by one MSS per RTT.  This is typically implemented through a separate counter of acknowledged MSS units, which overflows and carries into the cwnd when it reaches the current cwnd.  This is also known as the Reno-linear growth rule.

The cwnd reduction on detecting congestion is generally implemented by subtracting one MSS from the cwnd for every two MSS segments transmitted, until the new cwnd matches the reduction in cwnd since the congestion signal arrived.  This results in the new cwnd being 50% of the old one.

Extending the above behaviour to include SCE is straightforward:

Slow-start growth is terminated as soon as the first SCE mark is detected (in addition to all other valid reasons).  This generally occurs sooner than CE, so the likelihood of a major overshoot of the cwnd value is reduced (especially on short-RTT paths).

Reno-linear growth occurs for every segment with ECT or Not-ECT marking as normal, by adding the newly acked bytes to the counter and carrying into the cwnd.

A shrink of the cwnd occurs for every segment with SCE marking; the newly acked bytes are multiplied by sqrt(cwnd/MSS) before subtracting them from the growth counter; if this would result in a negative value in the counter, a borrow is taken from the cwnd.  This should result in RTT-fair convergence with other SCE-aware flows, as well as smooth evolution towards a steady state with a minority of SCE marks.

Additionally, if a CE marked packet immediately follows an SCE marked packet, or SCE is received during the following RTT, it is appropriate to implement a reduced congestion backoff by terminating the cwnd reduction steps when the new cwnd is at most four times the reduction in cwnd since the congestion signal arrived.  This results in the new cwnd being 80% of the prior value, instead of only 50%.  Restricting this modification to cases where SCE is observed in conjunction with the CE ensures that the traditional behaviour is retained in response to legacy AQM action.

These adaptations retain traditional AIMD behaviour in a CE-marking environment, but adopt an AIAD behaviour when SCE signals are detected.  AIAD is stable, but does not converge to fairly sharing the path when multiple SCE-aware flows are involved, and will tend to defer to legacy SCE-ignorant flows because the latter continue to grow cwnd in the face of SCE signals.  The latter effect is explicitly countered by reducing the multiplicative congestion backoff when SCE is observed in conjunction with CE, but achieving fairness with other SCE-aware flows remains a challenge.

---

CUBIC-SCE
=========

TCP CUBIC is very widely deployed, as it has been the default TCP congestion control in Linux for several years, and has generally proved its worth by scaling up cleanly to today's Internet path capacities.  It has the highly desirable property of pausing its growth near the cwnd which most recently triggered a congestion signal, putting it halfway along the path to settling at the ideal BDP.  However, without SCE awareness, it will eventually probe upwards from that ideal point until a harsher signal is again received.

Actually, CUBIC incorporates two window functions, one of which is essentially NewReno and can be modified as above, and a cubic function over time (rather than RTTs), with the higher of the two calculations actually taking effect.  In RFC-8312, the cubic function is defined as:

	W_cubic(t) = C*(t-K)^3 + W_max

	K = cubic_root(W_max*(1-beta_cubic)/C)

In the above, W_max is normally the cwnd at which a congestion signal was last received, t is the time since that event, and K is designed to produce a multiplicative decrease immediately following that event (beta_cubic = 0.7); C can be considered an "aggression constant" for which the recommended value is 0.4*MSS.

However, special treatment is defined for W_max and K if performing an early exit from slow-start, ie. for reasons other than detecting a packet loss or CE mark.  In that case, W_max is set to the cwnd on exit of slow-start, and K is set to zero, with t counting from the time of exiting.

It should be noted that unlike CE, a single SCE mark does not signify that the cwnd has reached a point where further cwnd growth cannot be permitted.  However, it does signify that the slow-start phase should be exited immediately and a more cautious probe initiated.  The existing mechanism for exiting slow-start early does that nicely.

We must still define a reasonable response to intermittent and continuous SCE marks after that point, however, which converges on a stable SCE ratio from either side.  To assist with this, we define a time T which is initialised to the time of exiting slow-start, and to (now+K) when a loss or CE mark occurs; this is the inflection point of the cubic curve.  We can then replace (t-K) in the W_cubic(t) formula with (now-T), to obtain a new function W_cubic(now).

Whenever new SCE-marked data arrives (or is acknowledged), take the number of payload bytes as S_bytes and the current value of W_cubic(now) in bytes as W.  Then calculate a reduction factor R = S_bytes/W.  Update T += R*(now-T) to reduce the slope of the cubic function, then update W_max += W - W_cubic(now) to restore continuity.  Also perform a decrement to W_max in the same manner as for NewReno-SCE's cwnd: W_max -= (S_bytes / sqrt(cwnd/MSS)) / cwnd, remembering remainder for the next reduction.

Eventually, T should settle in the mildly convex phase, some constant interval in the past, so the W_cubic function applies slight upward pressure on W_max with every SCE update.  This is balanced by the decrement of W_max as long as the RTT doesn't grow unreasonably large.

The actual marking ratio at which CUBIC-SCE becomes stable will depend on both the RTT and BDP, such that longer RTTs will stabilise at higher ratios (possibly above 50%) and shorter RTTs will stabilise at lower ratios, but this is partially balanced by larger cwnds requiring a lower SCE ratio due to the backoff rule.  Simulations should be able to predict which RTTs correspond to which ratios and check that the operational range is reasonable.

If the RTT becomes too long for SCE to sufficiently control growth, a CE mark will eventually arrive to sort things out; fewer CE marks should be needed than for standard CUBIC, and the maximum upward excursion of cwnd should also be reduced, so SCE is still beneficial even if it doesn't fully settle.

As with NewReno-SCE, the response to CE may be softened if received in association with SCE marks, by using an alternative value of K calculated from a higher value of beta_cubic, say 0.8.  This should help to avoid starvation in competition with SCE-ignorant CUBIC flows.

---

DCTCP-SCE
=========

RFC-8257 states: "A DCTCP sender grows its congestion window in the same way as conventional TCP."  The differences in DCTCP are therefore limited to its response to CE, which is essentially to apply a cwnd halving over an RTT, but only pro-rata to the number of CE marks actually received versus the total number of data-carrying packets.  This behaviour is incompatible with conventional ECN-Capable TCPs.

DCTCP can be rehabilitated by causing this new function to respond to SCE instead of CE, and restore a normal, RFC-3168 compliant response to CE.  This is easily implemented as a modification of NewReno by immediately subtracting half the SCE-marked bytes from the cwnd (without indirecting them through a carry counter as the growth function does).  Additionally, SCE should cause an immediate exit of slow-start.

---

Single-Queue Stability
======================

The first versions of this document aimed for a roughly 50% SCE setpoint by using Reno-linear cwnd shrinkage functions in response to SCE.  This AIAD behaviour, however, does not reliably converge to RTT-fairness as conventional TCPs do, and may have limited SCE's application to middleboxes implementing flow-isolating AQMs.

By accepting a lower and more variable setpoint, where stability occurs at a relatively small fraction of SCE-marked bytes, RTT fairness can be achieved with single-queue AQMs by implementing a shrinkage function which scales with cwnd more aggressively than the growth function.  One candidate for such a function is that used by DCTCP (but applied to SCE markings instead of CE), or we could modify the Reno-linear function directly by multiplying the bytes subtracted by sqrt(cwnd).  The above descriptions take the latter option as it is less drastic.

---

Small Congestion Windows and Pacing are Recommended
===================================================

TCPs implementing SCE should consider allowing the cwnd to fall below the Initial Window to some implementation-defined minimum.  Sub-MSS cwnds can efficiently be supported by TCP Pacing, as a natural extension of the inter-packet scheduling formula dT = MSS*RTT/cwnd.  This allows flows to maintain their fair share of a severely congested bottleneck without driving its queue into tail-drop.

The ideal moment to signal exit of slow-start is one RTT before the cwnd actually reaches the BDP, so that the 1-RTT-delayed response occurs when cwnd approximately equals BDP, and only minor adjustments are then needed to converge on the BDP.  However, it is difficult for a middlebox to offer SCE signalling that starts before the queue shows any occupancy, without risking excessive signalling that would prevent a flow from reaching the BDP entirely.

An answer to this conundrum is offered by pacing.  The sender should scale its pacing rate during slow-start so that the short-term delivery rate corresponds to "even" pacing advanced by 1 RTT at the slow-start growth rate.  For a typical Appropriate Byte Counting TCP, the growth rate is a doubling per RTT, so a 2x pacing multiplier is correct.  This will cause queue growth and SCE signalling to begin one RTT early, as required.  Upon exit from slow-start into congestion avoidance, the pacing rate should be restored to produce even pacing of the cwnd across each RTT.


---

(Material cut from SCE draft)

## TCP Handshake

If the three-way handshake is conducted using ECT-marked packets, it would become
feasible to detect a congested link on the path before slow-start even begins, and
pre-emptively disable behaviour which would likely exacerbate that congestion.  In
particular, senders should consider choosing a smaller Initial Window and/or going
straight into Congestion Avoidance mode instead of Slow Start, if SCE or CE is
signalled during the handshake.

Since ECE is already set for the SYN/ACK packet as part of ECN negotiation, other
means must be used to convey reception of a CE mark on the SYN packet.  This could
take the form of a small initial Receive Window, the NS bit additionally being set, or
the provision of an explicit ECN feedback option if the SYN endpoint indicated support.

## Cubic

Consider a TCP transport implementing a CUBIC-like congestion control.  This
presently exhibits exponential cwnd growth during slow-start,
polynomial cwnd growth in steady-state, and multiplicative decrease
upon detecting a single CE marking or packet loss in one RTT cycle.

With SCE awareness, it might exit slow-start upon detecting a single
SCE marking, reduce the slope of its growth function slightly for each
SCE mark received, and implement a square-root decline using a variant
of the Reno-linear formula when growth is essentially halted by high enough SCE rates.
On detecting CE in isolation, the existing 30% or 40% sharp reduction is retained,
but a smaller 10% or 20% reduction might be implemented when CE is accompanied by SCE
to retain overall throughput in competition with SCE-ignorant flows.

In ideal circumstances, the above behaviour would result in the send
rate stabilising at a level which produces SCE marking but not CE marking
at some bottleneck on the path.  The middlebox performing
this marking can thus control the send rate smoothly to an ideal value,
maximising throughput with minimum average queue length.
